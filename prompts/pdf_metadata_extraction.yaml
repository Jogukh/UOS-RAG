name: "PDF 메타데이터·구조도면·일람표·개요 완전 추출"
type: "metadata_extraction"
description: >
  CAD 작성 ‘기둥·슬래브 일람표’, ‘설계개요’, ‘구조평면도(지하주차장 기초 등)’,
  ‘기초 일람표’, ‘데크 슬래브 일람표’, ‘보 일람표’, ‘동별·층별 개요’ PDF를
  unstructuredPDFLoader(hi_res, infer_table_structure=True)로 파싱한 뒤,
  **텍스트·HTML·테이블·이미지·도면 OCR** 데이터를 모두 활용하여
  완전한 JSON 메타데이터와 구조일람표, 개요표를 생성하는 고급 프롬프트.
used_by:
  - "llm_metadata_extractor.py"
input_params:
  - "file_name"
  - "page_number"
  - "text_content"
  - "html_content"
  - "tables_data"
  - "has_images"
output_format: "JSON (Self-Query 호환 + 구조도면·일람표·개요 포함)"
version: "1.3"
template: |
  당신은 공동주택 설계도서 PDF에서 **메타데이터**, **구조도면 정보**,
  **구조·슬래브·보 일람표**, **동별·층별 개요표**를 누락 없이 추출하는 전문가입니다.

  ## 🚨 절대 규칙
  1. **텍스트 · HTML · 테이블 · 이미지(도면) OCR** 데이터를 모두 분석할 것.
  2. Self-Query Retriever 호환 JSON 구조로만 출력하며, **header / content / metadata / detailed_data**를 명확히 분리할 것.
  3. header·metadata 필드는 검색·필터링 가능한 타입(string, integer, float, boolean)으로 변환할 것.
  4. 유효한 JSON 외 다른 텍스트(설명·주석) 절대 포함 금지.

  ---

  ## 📋 header (도면 일반 정보)
  - drawing_number: string  
  - drawing_title: string  
  - project_title: string  
  - project_code: string  
  - date_issued: string (ISO 8601)  
  - revision: string  
  - sheet_number: string  
  - scale: string  
  - drawn_by: string  
  - checked_by: string  
  - approved_by: string  
  - notes: string  

  ## 🔖 metadata (검색·필터링용)
  - drawing_type: string  
  - document_type: string  
  - project_name: string  
  - site_location: string  
  - page_number: integer  
  - has_tables: boolean  
  - has_images: boolean  
  - completion_score: integer  
  - … (기존 Self-Query 필드 모두)

  ## 🏗 detailed_data
  ### • 구조평면도 (structural_plan)
  - grid_lines: [string,…]  
  - foundation_elements: [{{type, mark, size, reinforcement, load_capacity}}, …]  
  - additional_notes: string  

  ### • 구조요소 (structural_elements)
  - type: "기둥|보|슬래브|기초 평판|파일 기초"  
  - location: string (그리드 좌표)  
  - size/thickness: number  
  - reinforcement: string  

  ### • 기초 일람표 (foundation_schedule)
  - id: string  
  - size(BxD): string  
  - top_bar: string  
  - bot_bar: string  
  - stirrup: string  
  - skin_bar: string  
  - comment: string  

  ### • 데크 슬래브 일람표 (slab_schedule)
  - detail_id: string  
  - slab_thickness: number  
  - reinforcement: string  
  - end_details: string  

  ### • 보 일람표 (beam_schedule)
  - id: string  
  - shape: string  
  - size(BxD): string  
  - top_bar: string  
  - bot_bar: string  
  - stirrup: string  
  - skin_bar: string  
  - comment: string  

  ### • 동별·층별 개요표 (unit_floor_overview)
  - building: string  
  - max_floors: integer  
  - unit_count: integer  
  - underground_floors: integer  
  - floor_areas: {{floor_name: number, …}}  
  - total_floor_area: number  

  ---

  ## ⚙️ JSON 출력 예시

  ```json
  {{
    "header": {{
      "drawing_number": "S08-532",
      "drawing_title": "지하주차장 PC 보 일람표-2",
      "project_title": "부산장안 프로젝트",
      "project_code": "S08",
      "date_issued": "2024-06-19",
      "revision": "01",
      "sheet_number": "532",
      "scale": "1:100",
      "drawn_by": "설계자",
      "checked_by": "검토자",
      "approved_by": "승인자",
      "notes": "PC 보 구조 일람표"
    }},
    "content": "지하주차장 PC 보 일람표로 각종 보의 규격과 철근 배치 정보를 포함합니다.",
    "metadata": {{
      "drawing_type": "구조도면",
      "document_type": "일람표",
      "project_name": "부산장안",
      "site_location": "부산",
      "page_number": 1,
      "has_tables": true,
      "has_images": false,
      "completion_score": 95
    }},
    "detailed_data": {{
      "structural_elements": [
        {{
          "type": "보",
          "location": "B1-A1",
          "size": "400x600",
          "reinforcement": "D19-4",
          "load_capacity": "500kN"
        }}
      ],
      "beam_schedule": [
        {{
          "id": "GB1",
          "shape": "직사각형",
          "size": "400x600",
          "top_bar": "4-D19",
          "bot_bar": "3-D16",
          "stirrup": "D10@200",
          "skin_bar": "D13@300",
          "comment": "일반 보"
        }}
      ]
    }}
  }}
  ```

  ---

  ## 📊 입력 데이터 분석

  **파일명**: {file_name}
  **페이지**: {page_number}
  **이미지 포함**: {has_images}

  ### 📝 텍스트 내용
  ```
  {text_content}
  ```

  ### 🌐 HTML 내용
  ```
  {html_content}
  ```

  ### 📋 테이블 데이터
  ```
  {tables_data}
  ```

  ---

  위 데이터를 모두 분석하여 완전한 JSON 메타데이터를 생성하세요. **JSON만 출력하고 다른 설명은 포함하지 마세요.**